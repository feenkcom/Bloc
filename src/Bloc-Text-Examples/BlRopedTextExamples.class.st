"
I contain examples of more complicated pieces of text to exemplify the rope structure.

"
Class {
	#name : #BlRopedTextExamples,
	#superclass : #Object,
	#category : #'Bloc-Text-Examples-Model'
}

{ #category : #'example - insert' }
BlRopedTextExamples >> append_empty_text [
	<gtExample>
	| aText wasAnnounced |
	
	aText := 'Hello' asRopedText.
	
	wasAnnounced := 0.
	aText when: BlTextStringsInserted do: [ wasAnnounced := wasAnnounced + 1 ].

	aText, '' asRopedText.

	self assert: aText asString equals: 'Hello'.
	self assert: wasAnnounced equals: 0.

	^ aText
]

{ #category : #examples }
BlRopedTextExamples >> copyWithoutExternalReferences [
	<gtExample>
	| text copy |
	text := (BlRunRopedText string: 'r')
			attributeRuns: (BlRunTree basicNew
					instVarAt: 1
						put: (BlRunTreeNode basicNew
								instVarAt: 1 put: 2;
								instVarAt: 2
									put: (BlRunTreeLeafNode basicNew
											instVarAt: 1 put: 1;
											instVarAt: 2
												put: ((Array new: 3)
														at: 1
															put: (BrTextAdornmentDynamicAttribute new beNotOverwritableByStyler beAppend
																	stencil: [ BlElement new background: Color red ]);
														at: 2
															put: (BlFontFamilyDefaultAttribute new name: 'Source Sans Pro');
														at: 3 put: (BlFontSizeDefaultAttribute new size: 14.0);
														yourself);
											yourself);
								instVarAt: 3
									put: (BlRunTreeLeafNode basicNew
											instVarAt: 1 put: 1;
											instVarAt: 2
												put: ((Array new: 3)
														at: 1
															put: (BlFontFamilyDefaultAttribute new name: 'Source Sans Pro');
														at: 2 put: GtFixItMarkerAttribute new;
														at: 3 put: (BlFontSizeDefaultAttribute new size: 14.0);
														yourself);
											yourself);
								instVarAt: 4 put: 0.18524433168826826;
								yourself);
					yourself).

	copy := text copyWithoutExternalReferences.
	0
		to: copy size
		do: [ :i | 
			(copy attributesAt: i)
				do: [ :att | self assert: (att isKindOf: BrTextAdornmentDynamicAttribute) not ] ].
	^ copy
]

{ #category : #accessing }
BlRopedTextExamples >> insertAtRandomPoints [
	<gtExample>
	
	| text string |
	string := 'abcd'.
	text := string asRopedText.
	1
		to: 1000
		do: [ :i | 
			| position inserted |
			position := string size atRandom.
			inserted := '<' , i printString , '>'.
			string := (string first: position) , inserted
					, (string allButFirst: position).
			text insertText: inserted asRopedText at: position.
			self assert: text asString equals: string ].
	text
]

{ #category : #'example - insert' }
BlRopedTextExamples >> insert_empty_strings [
	<gtExample>
	| aText insertedStrings |
	
	aText := 'Hello' asRopedText.
	
	insertedStrings := #().
	aText when: BlTextStringsInserted do: [ :anAnnouncement |
		insertedStrings := anAnnouncement strings.
	].

	aText insertStrings: { '' . 'World' } atAll: { 1 . 5 }.

	self assert: aText asString equals: 'HelloWorld'.
	self assert: insertedStrings equals: { 'World' }.

	^ aText
]

{ #category : #'examples - next span' }
BlRopedTextExamples >> nextSpanFontColorOnHelloWorldWithColor [
	<gtExample>
	| aText anIterator aSpan |

	aText := 'Hello World' asRopedText.
	(aText from: 1 to: 5) foreground: Color red.
	(aText from: 7 to: 11) foreground: Color blue.

	anIterator := aText iterator.
	
	aSpan := anIterator nextSpan: [ :eachAttribute| eachAttribute isKindOf: BlTextForegroundAttribute ].
	self assert: aSpan start equals: 1.
	self assert: aSpan end equals: 5.
	self assert: anIterator hasNext.
	self assert: aSpan asString equals: 'Hello'.
	
	aSpan := anIterator nextSpan: [ :eachAttribute| eachAttribute isKindOf: BlTextForegroundAttribute ].
	self assert: aSpan start equals: 6.
	self assert: aSpan end equals: 6.
	self assert: anIterator hasNext.
	self assert: aSpan asString equals: ' '.
	
	aSpan := anIterator nextSpan: [ :eachAttribute| eachAttribute isKindOf: BlTextForegroundAttribute ].
	self assert: aSpan start equals: 7.
	self assert: aSpan end equals: 11.
	self assert: anIterator hasNext not.
	self assert: aSpan asString equals: 'World'.

	^ aText
]

{ #category : #examples }
BlRopedTextExamples >> textEqualsWithAttributes [
	<gtExample>
	
	| left right |
	left := 'ab' asRopedText.
	right := 'ab' asRopedText.
	self assert: (left equals: right).
	left
		attributes: {BlTextForegroundAttribute color: Color red}
		from: 1
		to: 1.
	self assert: (left equals: right) not.
	right
		attributes: {BlTextForegroundAttribute color: Color red}
		from: 1
		to: 1.
	self assert: (left equals: right).
	left
		attributes: {BlTextForegroundAttribute color: Color blue}
		from: 2
		to: 2.
	self assert: (left equals: right) not.
	right
		attributes: {BlTextForegroundAttribute color: Color yellow}
		from: 2
		to: 2.
	self assert: (left equals: right) not.
	^ {left.
		right}
]

{ #category : #examples }
BlRopedTextExamples >> textWithAttributes [
	<gtExample>
	| text |
	
	text := 'The moldable editor' asRopedText.
	text insertString: String cr at: text size.
	text insertString: 'can be adapted ' at: text size.
	text insertString: 'to the context.' at: text size.
	(text from: 5 to: 12)
		fontSize: 20;
		monospace;
		foreground: Color blue.

	(text from: 43 to: 49)
		monospace.

	^ text

]

{ #category : #examples }
BlRopedTextExamples >> textWithCr [
	<gtExample>
	| text |

	text := ('Hello', String crlf, String tab, 'World') asRopedText.

	^ text
]
